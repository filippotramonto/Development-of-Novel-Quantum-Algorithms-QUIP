qfunc MCZPhase(phase: real, target: qbit, controls: qbit[]) {
  control (controls) {
    PHASE(phase * pi, target);
  }
}

qfunc phase_add_iteration(k: int, in_phase: real, target: qbit[], controls: qbit[]) {
  MCZPhase(((2 ** ((target.len - k) - 1)) * in_phase) % 2, target[k], controls);
}

qfunc phase_add_1qubit(in_phase: real, target: qbit[], control: qbit) {
  repeat (k: target.len) {
    phase_add_iteration(k, in_phase, target, control);
  }
}

qfunc qft_inner_iteration(m: int, kk: int, reg: qbit[]) {
  MCZPhase(1 / (2 ** (((m + kk) + 1) - kk)), reg[(m + kk) + 1], reg[kk]);
}

qfunc qft_outer_iteration(k: int, reg: qbit[]) {
  repeat (m: (reg.len - ((reg.len - k) - 1)) - 1) {
    qft_inner_iteration(m, (reg.len - k) - 1, reg);
  }
  H(reg[(reg.len - k) - 1]);
}

qfunc qft_custom(reg: qbit[]) {
  repeat (k: reg.len) {
    qft_outer_iteration(k, reg);
  }
}

qfunc iqft_custom(reg: qbit[]) {
  invert {
    qft_custom(reg);
  }
}

qfunc phase_add_2qubits(in_phase: real, target: qbit[], control1: qbit, control2: qbit) {
  controls: qbit[];
  {control1, control2} -> controls;
  repeat (k: target.len) {
    phase_add_iteration(k, in_phase, target, controls);
  }
  controls -> {control1, control2};
}

qfunc x2_mod_N_phase(x: qbit[], y: qbit[]) {
  hadamard_transform(x);
  hadamard_transform(y);
  counter: qbit[];
  allocate(3, counter);
  hadamard_transform(counter);
  phase_add_1qubit(1 * (2 ** (1 - counter.len)), counter, x[0]);
  iqft_custom(counter);
  phase_add_1qubit(0.0606, y, counter[0]);
  phase_add_1qubit(0.1212, y, counter[1]);
  phase_add_1qubit(0.2424, y, counter[2]);
  qft_custom(counter);
  phase_add_1qubit((-1) * (2 ** (1 - counter.len)), counter, x[0]);
  phase_add_2qubits(2 * (2 ** (1 - counter.len)), counter, x[0], x[1]);
  iqft_custom(counter);
  phase_add_1qubit(0.1212, y, counter[0]);
  phase_add_1qubit(0.2424, y, counter[1]);
  phase_add_1qubit(0.4848, y, counter[2]);
  qft_custom(counter);
  phase_add_2qubits((-2) * (2 ** (1 - counter.len)), counter, x[0], x[1]);
  phase_add_2qubits(2 * (2 ** (1 - counter.len)), counter, x[0], x[2]);
  phase_add_1qubit(1 * (2 ** (1 - counter.len)), counter, x[1]);
  iqft_custom(counter);
  phase_add_1qubit(0.2424, y, counter[0]);
  phase_add_1qubit(0.4848, y, counter[1]);
  phase_add_1qubit(0.9697, y, counter[2]);
  qft_custom(counter);
  phase_add_2qubits((-2) * (2 ** (1 - counter.len)), counter, x[0], x[2]);
  phase_add_1qubit((-1) * (2 ** (1 - counter.len)), counter, x[1]);
  phase_add_2qubits(2 * (2 ** (1 - counter.len)), counter, x[0], x[3]);
  phase_add_2qubits(2 * (2 ** (1 - counter.len)), counter, x[1], x[2]);
  iqft_custom(counter);
  phase_add_1qubit(0.4848, y, counter[0]);
  phase_add_1qubit(0.9697, y, counter[1]);
  phase_add_1qubit(1.9394, y, counter[2]);
  qft_custom(counter);
  phase_add_2qubits((-2) * (2 ** (1 - counter.len)), counter, x[0], x[3]);
  phase_add_2qubits((-2) * (2 ** (1 - counter.len)), counter, x[1], x[2]);
  phase_add_2qubits(2 * (2 ** (1 - counter.len)), counter, x[0], x[4]);
  phase_add_2qubits(2 * (2 ** (1 - counter.len)), counter, x[1], x[3]);
  phase_add_1qubit(1 * (2 ** (1 - counter.len)), counter, x[2]);
  iqft_custom(counter);
  phase_add_1qubit(0.9697, y, counter[0]);
  phase_add_1qubit(1.9394, y, counter[1]);
  phase_add_1qubit(3.8788, y, counter[2]);
  qft_custom(counter);
  phase_add_2qubits((-2) * (2 ** (1 - counter.len)), counter, x[0], x[4]);
  phase_add_2qubits((-2) * (2 ** (1 - counter.len)), counter, x[1], x[3]);
  phase_add_1qubit((-1) * (2 ** (1 - counter.len)), counter, x[2]);
  phase_add_2qubits(2 * (2 ** (1 - counter.len)), counter, x[1], x[4]);
  phase_add_2qubits(2 * (2 ** (1 - counter.len)), counter, x[2], x[3]);
  iqft_custom(counter);
  phase_add_1qubit(1.9394, y, counter[0]);
  phase_add_1qubit(3.8788, y, counter[1]);
  phase_add_1qubit(7.7576, y, counter[2]);
  qft_custom(counter);
  phase_add_2qubits((-2) * (2 ** (1 - counter.len)), counter, x[1], x[4]);
  phase_add_2qubits((-2) * (2 ** (1 - counter.len)), counter, x[2], x[3]);
  phase_add_2qubits(2 * (2 ** (1 - counter.len)), counter, x[2], x[4]);
  phase_add_1qubit(1 * (2 ** (1 - counter.len)), counter, x[3]);
  iqft_custom(counter);
  phase_add_1qubit(3.8788, y, counter[0]);
  phase_add_1qubit(7.7576, y, counter[1]);
  phase_add_1qubit(15.5152, y, counter[2]);
  qft_custom(counter);
  phase_add_2qubits((-2) * (2 ** (1 - counter.len)), counter, x[2], x[4]);
  phase_add_1qubit((-1) * (2 ** (1 - counter.len)), counter, x[3]);
  phase_add_2qubits(2 * (2 ** (1 - counter.len)), counter, x[3], x[4]);
  iqft_custom(counter);
  phase_add_1qubit(7.7576, y, counter[0]);
  phase_add_1qubit(15.5152, y, counter[1]);
  phase_add_1qubit(31.0303, y, counter[2]);
  qft_custom(counter);
  phase_add_2qubits((-2) * (2 ** (1 - counter.len)), counter, x[3], x[4]);
  phase_add_1qubit(1 * (2 ** (1 - counter.len)), counter, x[4]);
  iqft_custom(counter);
  phase_add_1qubit(15.5152, y, counter[0]);
  phase_add_1qubit(31.0303, y, counter[1]);
  phase_add_1qubit(62.0606, y, counter[2]);
  qft_custom(counter);
  phase_add_1qubit((-1) * (2 ** (1 - counter.len)), counter, x[4]);
  hadamard_transform(counter);
  iqft_custom(y);
}

qfunc bitwise_inner_product_mod2(r: int, x: qbit[], b: qbit) {
  repeat (i: x.len) {
    if ((floor(r / (2 ** i)) % 2) == 1) {
      CX(x[i], b);
    }
  }
}

qfunc measure_ancilla_in_rotated_basis(ancilla: qbit) {
  RY(0.7854, ancilla);
}

qfunc main(output x: qnum, output y: qnum, output b: qbit) {
  allocate(5, x);
  allocate(6, y);
  allocate(1, b);
  x2_mod_N_phase(x, y);
  bitwise_inner_product_mod2(27, x, b);
  hadamard_transform(x);
  measure_ancilla_in_rotated_basis(b);
}
